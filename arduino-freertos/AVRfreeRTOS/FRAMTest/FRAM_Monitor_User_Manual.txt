

di [<phy_drv#>]					- Initialise disk
ds [<phy_drv#>]					- Show disk status
dd <phy_drv#> [<sector>]		- Dump sector 
dx <iterations>					- Destructively Test DISKIO Functions - !!! DESTROYS DISK FORMATTING !!!

bd <addr>						- Dump (show) R/W buffer
br <phy_drv#> <sector> [<n>]	- Read disk into R/W buffer
be <addr> [<data>] ...			- Edit R/W buffer
bw <phy_drv#> <sector> [<n>]	- Write R/W buffer into disk
bf <n>							- Fill working buffer with <n>

fi <log drv#>					- Initialise logical drive
fs [<path>]						- Show logical drive status
fj <drive#>						- Change current drive
fm <logi drv#> <part type: 0: FDISK> <bytes/cluster>
								- Create file system (format drive) [mkfs]

fq								- Show current directory path [pwd]
fg <path>						- Change current directory [cd]
fk <name>						- Create a directory [mkdir]
fl [<path>]						- Directory listing [ll]
fu <name>						- Unlink (delete) a file or directory [rm, rmdir]

fn <old_name> <new_name>		- Change file or directory name [mv]
fa <atrr> <mask> <name>			- Change file or directory attribute [chmod]
ft <yyyy> <mm> <dd> <HH> <mm> <ss> <name>
								- Change file or directory time [utime]

fx <src_name> <dst_name>		- Copy file [cp]

fo <mode> <name>				- Open a file
fe <ptr>						- Seek (set) file pointer
fr <len>						- read file
fd <len>						- read and dump file from current file pointer
fw <len> <val>					- write file
fv								- Truncate file at current file pointer
fy								- Sync a file [sync]
fc								- Close a file


t [<year yy> <month mm> <date dd> <day: Sun=1> <hour hh> <minute mm> <second ss>] - read or set RTC [time]

//// FRAM Functions ?//

ff <base_address> <src_name>	- Copy file to EEPROM / SRAM Volume

rf <address> <length> </path>	- Copy EEPROM / SRAM Volume to FatFS file


ri <address> </path> 				- Initialise SPI SRAM
rj <base_address> </device_name> </path> - Mount and open a volume 
ry </path> 							- Unmount a volume 

rs </path>							- Volume status [ll -s]
rl </path> 							- Volume listing [ll]


ro <mode> <path>					- Open a FRAM file
rc									- Close a file
re <ptr>							- Seek (set) FRAM file pointer
rr <len>							- read FRAM file to buffer
rd <len>							- read and dump FRAM file from current FRAM file pointer
ru <path>							- Unlink a FRAM (delete) a file [rm]
rw <len> <val>						- write FRAM file
rn <old_path> <new_path>			- Change FRAM file name


*** FRAM commands
di0
fi0
fs0
fl

ri
ff 0x00000000 fram.dat
rj 0x00000000 /sram /home
rl /home

ff 0x01000000 fram.dat
rj 0x01000000 /eeprom /data
rl /data



**** THINGS TO REMEMBER ****
Options for linker for ATmega2560 (Arduino Mega)

Here freeRTOS heap_4 and malloc heap are overlapping each other.
-Wl,--section-start=.ext_ram_heap=0x802200  -Wl,--defsym=__heap_start=0x802200,--defsym=__heap_end=0x80ffff

Here freeRTOS heap_4 and malloc heap are separate. freeRTOS heap can't be bigger than 32kB-1 anyway.
-Wl,--section-start=.ext_ram_heap=0x808000  -Wl,--defsym=__heap_start=0x802200,--defsym=__heap_end=0x807fff

Options for sizer for ATmega2560 (Arduino Mega)
--remove-section=.ext_ram_heap
